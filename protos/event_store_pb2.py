# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: event_store.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import base_pb2 as base__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='event_store.proto',
  package='event',
  syntax='proto3',
  serialized_pb=_b('\n\x11\x65vent_store.proto\x12\x05\x65vent\x1a\nbase.proto\"\x1d\n\x0b\x45ventStream\x12\x0e\n\x06\x65vents\x18\x01 \x03(\t27\n\nEventStore\x12)\n\x03get\x12\x0c.common.Uuid\x1a\x12.event.EventStream\"\x00\x42\x03\xf8\x01\x01\x62\x06proto3')
  ,
  dependencies=[base__pb2.DESCRIPTOR,])
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_EVENTSTREAM = _descriptor.Descriptor(
  name='EventStream',
  full_name='event.EventStream',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='events', full_name='event.EventStream.events', index=0,
      number=1, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=40,
  serialized_end=69,
)

DESCRIPTOR.message_types_by_name['EventStream'] = _EVENTSTREAM

EventStream = _reflection.GeneratedProtocolMessageType('EventStream', (_message.Message,), dict(
  DESCRIPTOR = _EVENTSTREAM,
  __module__ = 'event_store_pb2'
  # @@protoc_insertion_point(class_scope:event.EventStream)
  ))
_sym_db.RegisterMessage(EventStream)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\370\001\001'))
import abc
from grpc.early_adopter import implementations
from grpc.framework.alpha import utilities
class EarlyAdopterEventStoreServicer(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def get(self, request, context):
    raise NotImplementedError()
class EarlyAdopterEventStoreServer(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def start(self):
    raise NotImplementedError()
  @abc.abstractmethod
  def stop(self):
    raise NotImplementedError()
class EarlyAdopterEventStoreStub(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def get(self, request):
    raise NotImplementedError()
  get.async = None
def early_adopter_create_EventStore_server(servicer, port, private_key=None, certificate_chain=None):
  import base_pb2
  import event_store_pb2
  method_service_descriptions = {
    "get": utilities.unary_unary_service_description(
      servicer.get,
      base_pb2.Uuid.FromString,
      event_store_pb2.EventStream.SerializeToString,
    ),
  }
  return implementations.server("event.EventStore", method_service_descriptions, port, private_key=private_key, certificate_chain=certificate_chain)
def early_adopter_create_EventStore_stub(host, port, metadata_transformer=None, secure=False, root_certificates=None, private_key=None, certificate_chain=None, server_host_override=None):
  import base_pb2
  import event_store_pb2
  method_invocation_descriptions = {
    "get": utilities.unary_unary_invocation_description(
      base_pb2.Uuid.SerializeToString,
      event_store_pb2.EventStream.FromString,
    ),
  }
  return implementations.stub("event.EventStore", method_invocation_descriptions, host, port, metadata_transformer=metadata_transformer, secure=secure, root_certificates=root_certificates, private_key=private_key, certificate_chain=certificate_chain, server_host_override=server_host_override)
# @@protoc_insertion_point(module_scope)
